let test = (() => {
  var ref = _asyncToGenerator(function* () {
    const c = yield mysql.createConnection({ port: 3306, user: 'mycause_dev', namedPlaceholders: true, password: 'mycause' });
    console.log('connected!');
    const [rows, fields] = yield c.query('show databases');
    console.log(rows);

    try {
      const [rows, fields] = yield c.query('some invalid sql here');
    } catch (e) {
      console.log('caught exception!', e);
    }

    console.log((yield c.execute('select sleep(0.5)')));
    console.log('after first sleep');
    console.log((yield c.execute('select sleep(0.5)')));
    console.log('after second sleep');
    var start = +new Date();
    console.log((yield Promise.all([c.execute('select sleep(2.5)'), c.execute('select sleep(2.5)')])));
    console.log('after 2+3 parallel sleep whitch is in fact not parallel because commands are queued per connection');
    var end = +new Date();
    console.log(end - start);
    yield c.end();

    const p = mysql.createPool({ port: 3306, user: 'mycause_dev', namedPlaceholders: true, password: 'mycause' });
    console.log((yield p.execute('select sleep(0.5)')));
    console.log('after first pool sleep');
    var start = +new Date();
    console.log((yield Promise.all([p.execute('select sleep(2.5)'), p.execute('select sleep(2.5)')])));
    console.log('after 2+3 parallel pool sleep');
    var end = +new Date();
    console.log(end - start);
    yield p.end();
  });

  return function test() {
    return ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var mysql = require('../../promise.js');

test().then(() => {
  console.log('done');
}, err => {
  console.log('error!', err);
  throw err;
});
